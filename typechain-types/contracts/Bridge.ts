/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface BridgeInterface extends utils.Interface {
  functions: {
    "excludeToken(address)": FunctionFragment;
    "includeToken(address,address)": FunctionFragment;
    "redeem(address,address,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "swap(address,address,uint256,uint256)": FunctionFragment;
    "updateChainById(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "excludeToken"
      | "includeToken"
      | "redeem"
      | "swap"
      | "updateChainById"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "excludeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "includeToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainById",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "excludeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateChainById",
    data: BytesLike
  ): Result;

  events: {
    "Redeem(address,uint256)": EventFragment;
    "Swap(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface RedeemEventObject {
  to: string;
  amount: BigNumber;
}
export type RedeemEvent = TypedEvent<[string, BigNumber], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface SwapEventObject {
  mintTokem: string;
  to: string;
  amount: BigNumber;
  chainId: BigNumber;
  nonce: BigNumber;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    excludeToken(
      _burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    includeToken(
      _burnToken: string,
      _mintToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateChainById(
      _chainId: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  excludeToken(
    _burnToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  includeToken(
    _burnToken: string,
    _mintToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    _nonce: BigNumberish,
    _chainId: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateChainById(
    _chainId: BigNumberish,
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    excludeToken(_burnToken: string, overrides?: CallOverrides): Promise<void>;

    includeToken(
      _burnToken: string,
      _mintToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateChainById(
      _chainId: BigNumberish,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Redeem(address,uint256)"(to?: null, amount?: null): RedeemEventFilter;
    Redeem(to?: null, amount?: null): RedeemEventFilter;

    "Swap(address,address,uint256,uint256,uint256)"(
      mintTokem?: null,
      to?: null,
      amount?: null,
      chainId?: null,
      nonce?: null
    ): SwapEventFilter;
    Swap(
      mintTokem?: null,
      to?: null,
      amount?: null,
      chainId?: null,
      nonce?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    excludeToken(
      _burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    includeToken(
      _burnToken: string,
      _mintToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateChainById(
      _chainId: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    excludeToken(
      _burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    includeToken(
      _burnToken: string,
      _mintToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      _nonce: BigNumberish,
      _chainId: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateChainById(
      _chainId: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
